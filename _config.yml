author: "Rangle.io"
title: "Introduction to React"
subtitle: "Rangle.io"
copyrightyear: "2017"

# Code highlighting.
highlighter: rouge

# Magic to make URLs resolve both locally and on GitHub.
# See https://help.github.com/articles/repository-metadata-on-github-pages/.
repository: <USERNAME>/<PROJECT>

# Table of contents.
toc:
- title: Overview
  permalink: /overview/
  type: misc
- title: Getting Started
  permalink: /react-intro/
  type: lesson
  questions:
  - "What is React?"
  - "What problems does it solve?"
  - "What do I need to install to start using it?"
  - "How do I create a starter application?"
  keypoints:
  - "React is a declarative JavaScript view framework."
  - "React's development dependencies can be installed using NPM."
  - "Use `create-react-app` to generate a starter application."
- title: Making a Component
  permalink: /react-component/
  type: lesson
  questions:
  - "What is a React component?"
  - "How can I combine HTML and JavaScript to create a component?"
  - "How are HTML properties passed into components?"
  keypoints:
  - "A component is a function or class that transforms properties and state into a display."
  - "Use JSX to mix HTML and JavaScript."
  - "Use `{...}` to interpolate JavaScript expressions into HTML in JSX."
  - "Use modern 'fat arrow' notation to write functions."
  - "HTML properties are passed to components in a `props` object parameter."
  - "Use `className` instead of `class` in JSX."
- title: Introducing Robodex
  permalink: /react-outline/
  type: lesson
  questions:
  - "What are we going to build?"
  - "How do I display a single robot?"
  - "How do I check that required properties are being provided?"
  keypoints:
  - "Every component must have a single root element."
  - "Use static data for early prototyping."
  - "Use the `prop-types` package and `classname.proptypes` to check properties."
  - "Use JavaScript string interpolation with JSX expression interpolation."
- title: Creating a Card List
  permalink: /react-cardlist/
  type: lesson
  questions:
  - "How do I display multiple robots?"
  keypoints:
  - "Use nested components, each with a single job."
  - "Use `map` to transform data into displays."
- title: Creating the Container
  permalink: /react-container/
  type: lesson
  questions:
  - "How should I manage multiple components?"
  - "How should I handle user interaction in React?"
  - "How expensive is this?"
  keypoints:
  - "Define a class with methods for handling interactions."
  - "Pass the class's methods to stateless components."
  - "Send interactions up the component tree and data down."
  - "Let React worry about minimizing rendering costs."
- title: Lifecycle Methods
  permalink: /react-lifecycles/
  type: lesson
  questions:
  - "Use lifecycle methods to add or change components' behavior at specific moments."
  - "Do basic state initialization in constructor."
  - "Use `componentDidMount` to run actions after all components are created."
  - "Use `shouldComponentUpdate` to control re-rendering."
  - "Use `componentWillUpdate` and `componentDidUpdate` for pre- and post-update actions."
  - "Use `componentWillUnmount` for end-of-life cleanup."
  keypoints:
  - "Lifecycles methods are divided into mounting, updating, and unmounting."
  - "`componentDidMount` is used most frequently."
- title: React Summary
  permalink: /react-summary/
  type: lesson
- title: Introduction to Redux
  permalink: /redux-intro/
  type: lesson
  questions:
  - "How should I manage my application's state?"
  - "How does Redux help me do this?"
  - "What are the key parts of Redux and how do they work together?"
  - "What developer tools are available to help build Redux applications?"
  keypoints:
  - "Application state should be immutable and updated using pure functions."
  - "An application should dispatch an *action* to a *store* whenever state changes."
  - "A *reducer* should produce a new state from the action and the old state."
  - "Redux DevTools allows state visualization and rewind debugging."
- title: Hello Redux
  permalink: /redux-hello/
  type: lesson
  questions:
  - "How do I implement this in an application?"
  keypoints:
  - "Define state and actions."
  - "Use `combineReducers` and `createStore` to connect them to the application."
  - "Use `store.dispatch` to take action."
- title: Actions and Reducers
  permalink: /redux-action-reducer/
  type: lesson
  questions:
  - "How should an application be structured to make use of Redux?"
  - "How do I define actions?"
  - "How do I handle actions?"
  - "How do I enable different parts of the application to work together?"
  keypoints:
  - "Divide application into high-level stateful components and low-level stateless components."
  - "Define symbolic names for actions."
  - "Define functions to create action objects."
  - "Define a reducer function that turns state and action into a new state."
  - "Reducer functions should return the state unchanged if the action is not theirs to handle."
- title: Providing a Store
  permalink: /redux-store/
  type: lesson
  questions:
  - "How do I use `react-redux` to create a store?"
  - "How do I tell it what to dispatch?"
  keypoints:
  - "Use `createStore` to create a Redux store."
  - "Use `Provider` to make that store visible throughout the application."
  - "Define a function to map application state to properties."
  - "Define another function to tell the store what to dispatch when."
  - "Use `connect` to wire everything together."
- title: Long-Lived Operations
  permalink: /redux-long/
  type: lesson
- title: Redux Logging
  permalink: /redux-logging/
  type: lesson
- title: Redux Thunk
  permalink: /redux-thunk/
  type: lesson
- title: Merging
  permalink: /redux-merge/
  type: lesson
- title: Advanced Topics
  permalink: /advanced/
  type: lesson
- permalink: /summary/
  title: Summary
  type: misc
- permalink: /guide/
  title: "Instructors' Guide"
  type: misc
- permalink: /gloss/
  title: Glossary
  type: misc
- permalink: /refs/
  title: References
  type: misc
- permalink: /license/
  title: License
  type: misc
- permalink: /conduct/
  title: Code of Conduct
  type: misc
- permalink: /contributing/
  title: Contributing
  type: misc
